package utils

import models.Resident
import models.Address
import models.Residence
import org.apache.pdfbox.pdmodel.PDDocument
import org.apache.pdfbox.pdmodel.PDPage
import org.apache.pdfbox.pdmodel.PDPageContentStream
import org.apache.pdfbox.pdmodel.common.PDRectangle
import org.apache.pdfbox.pdmodel.font.PDType1Font
import java.io.File
import java.security.MessageDigest
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.*

/**
 * Utility class for generating PDF documents using Apache PDFBox.
 */
class PdfGenerator {
    companion object {
        /**
         * Generates a proof of address PDF for the given resident and address.
         *
         * @param resident The resident for whom to generate the proof of address
         * @param address The address to include in the proof of address
         * @param residence The residence information linking the resident to the address
         * @param referenceNumber The unique reference number for this proof of address
         * @param verificationCode The verification code for security purposes
         * @return The generated PDF file
         */
        fun generateProofOfAddressPdf(
            resident: Resident,
            address: Address,
            residence: Residence,
            referenceNumber: String,
            verificationCode: String
        ): File {
            // Create a temporary file for the PDF
            val tempFile = File.createTempFile("proof_of_address_${resident.id}", ".pdf")

            // Create a new PDF document
            PDDocument().use { document ->
                // Create a new page
                val page = PDPage(PDRectangle.A4)
                document.addPage(page)

                // Create a content stream for adding content to the page
                PDPageContentStream(document, page).use { contentStream ->
                    // Set font and font size
                    val titleFont = PDType1Font.HELVETICA_BOLD
                    val normalFont = PDType1Font.HELVETICA
                    val fontSize = 12f
                    val titleFontSize = 14f
                    val leading = 1.5f * fontSize

                    // Start text
                    contentStream.beginText()

                    // Set initial position (top left with margins)
                    contentStream.newLineAtOffset(50f, 750f)

                    // Title
                    contentStream.setFont(titleFont, titleFontSize)
                    contentStream.showText("PROOF OF ADDRESS")
                    contentStream.newLineAtOffset(0f, -leading)
                    contentStream.showText("================")
                    contentStream.newLineAtOffset(0f, -leading * 1.5f)

                    // Switch to normal font for the rest of the document
                    contentStream.setFont(normalFont, fontSize)

                    // Reference number and date
                    contentStream.showText("Reference Number: $referenceNumber")
                    contentStream.newLineAtOffset(0f, -leading)
                    contentStream.showText("Date: ${LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}")
                    contentStream.newLineAtOffset(0f, -leading * 1.5f)

                    // Resident information
                    contentStream.showText("This is to certify that:")
                    contentStream.newLineAtOffset(0f, -leading * 1.5f)
                    contentStream.showText("${resident.firstName} ${resident.lastName}")
                    contentStream.newLineAtOffset(0f, -leading)
                    contentStream.showText("ID Number: ${resident.idNumber}")
                    contentStream.newLineAtOffset(0f, -leading * 1.5f)

                    // Address information
                    contentStream.showText("Resides at the following address:")
                    contentStream.newLineAtOffset(0f, -leading * 1.5f)
                    contentStream.showText("${address.houseNumber} ${address.line}")
                    contentStream.newLineAtOffset(0f, -leading)
                    contentStream.showText("${address.suburb}")
                    contentStream.newLineAtOffset(0f, -leading)
                    contentStream.showText("${address.town}")
                    contentStream.newLineAtOffset(0f, -leading)
                    contentStream.showText("${address.postalCode}")
                    contentStream.newLineAtOffset(0f, -leading * 1.5f)

                    // Occupation date
                    contentStream.showText("Since: ${residence.occupationDate}")
                    contentStream.newLineAtOffset(0f, -leading * 1.5f)

                    // Footer information
                    contentStream.showText("This proof of address was generated by MyVillage application.")
                    contentStream.newLineAtOffset(0f, -leading)
                    contentStream.showText("Verification Code: $verificationCode")
                    contentStream.newLineAtOffset(0f, -leading * 1.5f)
                    contentStream.showText("This document is electronically generated and does not require a signature.")

                    // End text
                    contentStream.endText()
                }

                // Save the document to the temporary file
                document.save(tempFile)
            }

            return tempFile
        }

        /**
         * Generates a unique reference number for a proof of address.
         *
         * @return A unique reference number
         */
        fun generateReferenceNumber(): String {
            val timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS"))
            val random = (1000..9999).random()
            val uniqueId = UUID.randomUUID().toString().substring(0, 8)
            return "POA-$timestamp-$random-$uniqueId"
        }

        /**
         * Generates a verification code for a proof of address.
         *
         * @param resident The resident for whom the proof of address is generated
         * @param address The address included in the proof of address
         * @param referenceNumber The reference number of the proof of address
         * @return A verification code
         */
        fun generateVerificationCode(resident: Resident, address: Address, referenceNumber: String): String {
            // Use a deterministic input string without including the current timestamp
            val input = "${resident.id}-${address.id}-$referenceNumber"
            val md = MessageDigest.getInstance("SHA-256")
            val digest = md.digest(input.toByteArray())
            return digest.fold("") { str, it -> str + "%02x".format(it) }.substring(0, 16)
        }

        /**
         * Calculates a hash of the PDF content for integrity verification.
         *
         * @param file The PDF file
         * @return A hash of the PDF content
         */
        fun calculatePdfHash(file: File): String {
            val md = MessageDigest.getInstance("SHA-256")
            val digest = md.digest(file.readBytes())
            return digest.fold("") { str, it -> str + "%02x".format(it) }
        }
    }
}
